/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.BootCamp38.rest.contract;

import com.BootCamp38.model.Transaction;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-05T16:37:41.514380-05:00[America/Lima]")
@Validated
@Tag(name = "transaction", description = "the transaction API")
public interface TransactionApi {

    /**
     * POST /transaction : create a transaction
     * create a transaction
     *
     * @param transaction  (required)
     * @return Succesful operation (status code 200)
     */
    @Operation(
        operationId = "createTransaction",
        summary = "create a transaction",
        description = "create a transaction",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Succesful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Transaction>> _createTransaction(
        @Parameter(name = "Transaction", description = "", required = true) @Valid @RequestBody Mono<Transaction> transaction,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return createTransaction(transaction, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Transaction>> createTransaction(Mono<Transaction> transaction,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"typeTransaction\" : \"credit\", \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"productId\" : \"productId\", \"transactionId\" : \"transactionId\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(transaction).then(Mono.empty());

    }


    /**
     * DELETE /transaction/{transactionId} : deletes a transaction
     * deletes a transaction by transactionId
     *
     * @param transactionId transaction to delete (required)
     * @return no contend (status code 204)
     */
    @Operation(
        operationId = "deleteTransactionByTransactionId",
        summary = "deletes a transaction",
        description = "deletes a transaction by transactionId",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "204", description = "no contend")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/transaction/{transactionId}"
    )
    default Mono<ResponseEntity<Void>> _deleteTransactionByTransactionId(
        @Parameter(name = "transactionId", description = "transaction to delete", required = true, in = ParameterIn.PATH) @PathVariable("transactionId") Integer transactionId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return deleteTransactionByTransactionId(transactionId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Void>> deleteTransactionByTransactionId(Integer transactionId,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /transaction/{productId} : get transactions
     * get transactions by productId
     *
     * @param productId productId values that need to be considered for filter (required)
     * @return succesful operation (status code 200)
     */
    @Operation(
        operationId = "getTransactionsByProductId",
        summary = "get transactions",
        description = "get transactions by productId",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succesful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/transaction/{productId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<Transaction>>> _getTransactionsByProductId(
        @Parameter(name = "productId", description = "productId values that need to be considered for filter", required = true, in = ParameterIn.PATH) @PathVariable("productId") Integer productId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return getTransactionsByProductId(productId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Flux<Transaction>>> getTransactionsByProductId(Integer productId,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "[ { \"typeTransaction\" : \"credit\", \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"productId\" : \"productId\", \"transactionId\" : \"transactionId\" }, { \"typeTransaction\" : \"credit\", \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"productId\" : \"productId\", \"transactionId\" : \"transactionId\" } ]";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }


    /**
     * PUT /transaction : update an existing transaction
     * update an existing transaction by productId
     *
     * @param transaction update an existing transaction (required)
     * @return succesful operation (status code 200)
     */
    @Operation(
        operationId = "updateTransactionByProductId",
        summary = "update an existing transaction",
        description = "update an existing transaction by productId",
        tags = { "transaction" },
        responses = {
            @ApiResponse(responseCode = "200", description = "succesful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Transaction.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/transaction",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<Transaction>> _updateTransactionByProductId(
        @Parameter(name = "Transaction", description = "update an existing transaction", required = true) @Valid @RequestBody Mono<Transaction> transaction,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return updateTransactionByProductId(transaction, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Transaction>> updateTransactionByProductId(Mono<Transaction> transaction,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"typeTransaction\" : \"credit\", \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"productId\" : \"productId\", \"transactionId\" : \"transactionId\" }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(transaction).then(Mono.empty());

    }

}
